global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

snippet ooo "\infty" iA
\infty
endsnippet

priority 100
context "math()"
snippet EE "exists" iA
\exists
endsnippet

priority 100
context "math()"
snippet AA "forall" iA
\forall
endsnippet

context "math()"
snippet bul "bullet" iA
\bullet
endsnippet

context "math()"
snippet ll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla
endsnippet

context "math()"
snippet xx "cross" iA
\times
endsnippet

priority 100
snippet ** "cdot" iA
\cdot
endsnippet

priority 100
snippet .. "ldots" iA
\ldots
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet <= "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" iA
\iff
endsnippet

context "math()"
snippet == "isomorphic" iA
\cong
endsnippet

context "math()"
snippet := "colon equal" iA
\coloneqq
endsnippet

context "math()"
snippet =: "equal colon" iA
\eqqcolon
endsnippet

snippet neq "not equals" iA
\neq
endsnippet

snippet leq "leq" iA
\leqslant
endsnippet

snippet geq "geq" iA
\geqslant
endsnippet

priority 100
context "math()"
snippet to "to" wA
\to
endsnippet

priority 200
context "math()"
snippet \into "injection" iA
\hookrightarrow
endsnippet

priority 200
context "math()"
snippet onto "surjection" iA
\twoheadrightarrow
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

priority 100
context "math()"
snippet !> "mapsto" iA
\mapsto
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet

snippet ~~ "~" iA
\sim
endsnippet

snippet || "mid" iA
\mid
endsnippet

context "math()"
snippet sbs "subset" Ai
\subset
endsnippet

context "math()"
snippet sps "superset" Aw
\supset
endsnippet

priority 100
context "math()"
snippet notin "not in " iA
\notin
endsnippet

priority 10
context "math()"
snippet in "in" wA
\in
endsnippet

context "math()"
snippet nn "cap" iA
\cap
endsnippet

context "math()"
snippet uu "cup" iA
\cup
endsnippet
                               
context "math()"
snippet \cupu "bigcup" iA
\bigcup
endsnippet

context "math()"
snippet \capn "bigcap" iA
\bigcap
endsnippet

context "math()"
snippet 00 "emptyset" iA
\varnothing
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet
